; OM File Header - Saved 2024/07/09 15:52:32
; (7.04 :patc (om-make-point 172 60) (om-make-point 1182 183) (om-make-point 917 867) "" 183 0 "2024/07/09 01:56:25" "2024/07/09 15:52:32")
; End File Header
(in-package :om)(load-lib-for (quote ("OMishi")))(setf *om-current-persistent* (om-load-patch1 "zigzag-chordseqtrace" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 360 61) (quote "Chord-seq is connected to the first inlet of the function. For more information on each inlet, click the subpatch - - - >") "" (om-make-point 319 634) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Inlets explained" (om-load-patch-abs1 "Inlets explained" (quote ((let ((box (om-load-boxcomment "comment 17" (om-make-point 343 291) (quote "independent from but concurrent to Inlet 2, you can specify the specific *movement* that each group of the pitch-traversing movement undergoes. Aside from nil, you have to specify it with a list.$$nil or (o) : sublist is read ordinarily, from beginning to end.$(r): sublist is retrograded.$(b1): sublist is bifurcated clockwise from its center.$(b2): sublist is bifurcated counterclockwise from its center.$(c1): sublist is converged from the beginning, clockwise, toward its center.$(c2): sublist is converged from the end, counterclockwise, toward its center.$$You may combine any of these items, which are read cyclically.") "" (om-make-point 1214 50) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 16" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 1258 337) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 173 227) (quote "a number indicating the amount of step to take within each group of the pitch-traversing movement. If set to 0, each pitch-traversing movement starts from the same midicent, referenced by the index number in Inlet 3. It can take both negative and positive integers") "" (om-make-point 1008 133) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 1055 337) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 176 235) (quote "a number indicating the amount of step to take within each group of the pitch-traversing movement. If set to 0, it returns the midicent that corresponds to the index number specified in Inlet 3, in the amount specified in Inlet2. It can take both negative and positive integers") "" (om-make-point 790 117) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ZIGZAG-CHORDSEQTRACE 2" (quote zigzag-chordseqtrace) (quote ((om-load-inputfun (quote input-funbox) "chord-seq list of midicents" "CHORDSEQ" (list (list 6000 6400 6700 7000 7400 7800) (list 6100 6500 6800 7100 7500 7900) (list 6200 6600 6900 7200 7600 8000) (list 6300 6700 7000 7300 7700 8100))) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 1: sublist length(s)" "LIST2" (list 3 4)) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 2: starting pitch in nth value" "NUM1" 0) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 3: skip within sublist" "NUM2" 2) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 4: skip from one sublist to another" "NUM3" 1) (om-load-inputfun (quote input-funbox) "further process of each sublist" "CONTOUROPTION" nil))) (om-make-point 50 401) (om-make-point 1421 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 108 59) (quote "chord-seq list of midicents") "" (om-make-point 202 291) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 242 335) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 159 160) (quote "list of pitch-traversing movement (for example, (3 4) indicates that the function traverses the list of midicents in alternating groups of 3 and 4 pitches ") "" (om-make-point 393 188) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 9" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 448 338) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 10" (om-make-point 131 143) (quote "a number indicating where in the list of midicents to begin this process. 0 = beginning, as in the lisp code (nth 0 list)") "" (om-make-point 598 197) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 647 334) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 23 70) (quote "|$|$|$V") "" (om-make-point 857 335) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 7.04 nil "" (om-make-point 1066 311) (om-make-point 1611 537)) (quote nil) (om-make-point 519 690) nil nil nil "Inlets explained"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 384 95) (quote "This is accomplished by sequentially grouping all chords (if necessary, each chord's pitch content is reordered from the lowest to the highest pitch), creating one large list of pitches (that appears like a series of upward arpeggios).") "" (om-make-point 320 544) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 279 79) (quote "zigzag-chordseqtrace is a function that traces one chord to another in a systematic manner. Take this chord-seq as an example:") "" (om-make-point 121 179) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 404 105) (om-make-point 237 79) (list (list 6000 6400 6700 7000 7400 7800) (list 6100 6500 6800 7100 7500 7900) (list 6200 6600 6900 7200 7600 8000) (list 6300 6700 7000 7300 7700 8100)) "((6000 6400 6700 7000 7400 7800) (6100 6500 6800 7100 7500 7900) (6200 6600 6900 7200 7600 8000) (6300 6700 7000 7300 7700 8100))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 403 170) (om-make-point 236 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6400 6700 7000 7400 7800) (6100 6500 6800 7100 7500 7900) (6200 6600 6900 7200 7600 8000) (6300 6700 7000 7300 7700 8100))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :fluidsynth) 1 nil 1000 0 (om-make-point 817 239) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 545 40) (quote "OMishi Library ~ zigzag-chordseqtrace ~ Examples ") "" (om-make-point 132 27) nil (om-make-color 0 0 0) (om-make-font "Courier New" 18.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 28) (quote "- Yoshiaki Onishi (July 2024)") "" (om-make-point 133 54) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ZIGZAG-CHORDSEQTRACE" (quote zigzag-chordseqtrace) (quote ((om-load-inputfun (quote input-funbox) "chord-seq list of midicents" "CHORDSEQ" (list (list 6000 6400 6700 7000 7400 7800) (list 6100 6500 6800 7100 7500 7900) (list 6200 6600 6900 7200 7600 8000) (list 6300 6700 7000 7300 7700 8100))) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 1: sublist length(s)" "LIST2" (list 3 4)) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 2: starting pitch in nth value" "NUM1" 0) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 3: skip within sublist" "NUM2" 2) (om-load-inputfun (quote input-funbox) "zigzag-arithm-ser Inlet 4: skip from one sublist to another" "NUM3" 1) (om-load-inputfun (quote input-funbox) "further process of each sublist" "CONTOUROPTION" nil))) (om-make-point 434 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 302 401) (om-make-point 458 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6700) (7400) (6400) (7000) (7800) (6500) (6700) (7400) (6100) (7000) (7800) (6500) (7100) (7400) (6100) (6800) (7800) (6500) (7100) (7900) (6100) (6800) (7500) (6500) (7100) (7900) (6600) (6800) (7500) (6200) (7100) (7900) (6600) (7200) (7500) (6200) (6900) (7900) (6600) (7200) (8000) (6200) (6900) (7600) (6600) (7200) (8000) (6700) (6900) (7600) (6300) (7200) (8000) (6700) (7300) (7600) (6300) (7000) (8000) (6700) (7300) (8100) (6300) (7000) (7700) (6700) (7300) (8100) (6400) (7000) (7700) (6000) (7300) (8100) (6400) (7000) (7700) (6000) (6700) (8100) (6400) (7000) (7800))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8375)) :ldur (quote ((75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 0 0 (om-make-point 400 25) (om-make-point 1601 339) 0 1000 nil 233/100 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 500 368) (om-make-point 62 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 563 367) (om-make-point 44 30) (list 75) "(75)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 1 nil 0) (5 1 8 0 nil 0) (8 0 9 1 nil 0) (10 0 9 2 nil 0) (11 0 9 3 nil 0))) nil 7.04))