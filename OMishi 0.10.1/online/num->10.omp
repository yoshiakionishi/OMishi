; OM File Header - Saved 2024/07/03 07:39:08
; (7.04 :patc (om-make-point 172 60) (om-make-point 50 50) (om-make-point 634 703) "" 183 0 "2024/07/03 07:37:46" "2024/07/03 07:37:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OMishi")))(setf *om-current-persistent* (om-load-patch1 "num-)10" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 218 28) (quote "10->num and num->10 examples") "" (om-make-point 179 101) nil (om-make-color 0 0 0) (om-make-font "Courier New" 12.0D0 :family "Courier New" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NUM->10" (quote num->10) (quote ((om-load-inputfun (quote input-funbox) "list of numbers to turn into 1 and 0" "LIST1" (list (list 3) 5 4 1 3)))) (om-make-point 321 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NUM->10" (quote num->10) (quote ((om-load-inputfun (quote input-funbox) "list of numbers to turn into 1 and 0" "LIST1" (list (list 3) 5 4 1 3)))) (om-make-point 177 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "10->NUM" (quote 10->num) (quote ((om-load-inputfun (quote input-funbox) "list of numbers to turn into 1 and 0" "LIST1" (list 0 0 1 0 0 1 0 1)))) (om-make-point 323 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 287 161) (om-make-point 135 30) (list 1 0 1 1 0 0 0 0 1 0) "(1 0 1 1 0 0 0 0 1 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 155 161) (om-make-point 113 30) (list 0 0 1 0 0 1 0 1) "(0 0 1 0 0 1 0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "10->NUM" (quote 10->num) (quote ((om-load-inputfun (quote input-funbox) "list of numbers to turn into 1 and 0" "LIST1" (list 0 0 1 0 0 1 0 1)))) (om-make-point 179 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (6 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 6 0 nil 0))) nil 7.04))
